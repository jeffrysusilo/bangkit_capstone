from google.colab import drive
drive.mount('/content/drive')

zip_path = '/content/drive/My Drive/BISINDO.zip'

import zipfile

extracted_path = '/content/BISINDO'  # Ganti dengan path tempat Anda ingin mengekstrak file ZIP

# Ekstraksi file ZIP
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extracted_path)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, LSTM, Dense, Reshape, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator


# Path ke dataset yang telah dimuat
train_path = '/content/BISINDO/BISINDO/training'
validation_path = '/content/BISINDO/BISINDO/validation'
test_path = '/content/BISINDO/BISINDO/test'

# Augmentasi dan prapemrosesan data menggunakan ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255)
validation_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

img_height = 64
img_width = 64
img_channels = 3  # Ubah ke 1 jika menggunakan citra grayscale
num_classes = 26  # Sesuaikan dengan jumlah kategori/bahasa isyarat yang ada dalam dataset
num_epochs = 10
batch_size = 32  # Atur sesuai dengan kebutuhan Anda

train_generator = train_datagen.flow_from_directory(
        train_path,
        target_size=(img_height, img_width),
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = validation_datagen.flow_from_directory(
        validation_path,
        target_size=(img_height, img_width),
        batch_size=batch_size,
        class_mode='categorical')

test_generator = test_datagen.flow_from_directory(
        test_path,
        target_size=(img_height, img_width),
        batch_size=batch_size,
        class_mode='categorical')

# CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, img_channels)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())

# LSTM model
model.add(Dense(64, activation='relu'))
model.add(Reshape((1, -1)))
model.add(Dropout(0.2))
model.add(LSTM(128))

# Output layer
model.add(Dense(num_classes, activation='softmax'))

# Compile model
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_generator, epochs=num_epochs, validation_data=validation_generator)

# Evaluate the model
accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {accuracy}")
